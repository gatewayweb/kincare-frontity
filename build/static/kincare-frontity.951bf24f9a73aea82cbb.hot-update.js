webpackHotUpdate("kincare-frontity",{

/***/ "./packages/kincare-theme/src/components/pages/Home.js":
/*!*************************************************************!*\
  !*** ./packages/kincare-theme/src/components/pages/Home.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_waypoint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-waypoint */ \"./node_modules/react-waypoint/es/index.js\");\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! gsap */ \"./node_modules/gsap/index.js\");\n/* harmony import */ var _parts_ContactForm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../parts/ContactForm */ \"./packages/kincare-theme/src/components/parts/ContactForm.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}const Home=({state,page})=>{const[populated,setPopulated]=Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])({what_we_offer:false,services:false,mission:false,why_us:false});const{who_we_are,what_we_offer,services,our_mission,why_us}=page.acf;let sectionPadding='48px 32px';const WhoWeAre=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg7\",label:\"WhoWeAre\"})(\"background-color:\",state.theme.colors.darkBlue,\";padding:\",sectionPadding,\";color:#ffffff;h2{font-weight:bold;}p{font-size:16px;font-weight:400;line-height:22px;letter-spacing:0em;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const WhatWeOffer=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg6\",label:\"WhatWeOffer\"})(\"padding:\",sectionPadding,\";h2{font-weight:bold;}img{border-radius:8px;}p{font-size:16px;font-weight:400;line-height:22px;letter-spacing:0em;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const Services=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg5\",label:\"Services\"})(\"padding:\",sectionPadding,\";background-color:\",state.theme.colors.lightGrayBlue,\";position:relative;&:before{content:'';width:0;height:0;border-style:solid;border-width:34px 37px 0 37px;border-color:#ffffff transparent transparent transparent;position:absolute;left:calc(50% - 37px);top:-2px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const ServiceBox=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"article\", false?undefined:{target:\"ebbr1eg4\",label:\"ServiceBox\"})(\"padding:16px;background-color:#ffffff;border-radius:8px;box-shadow:0px 15px 24px rgba(0, 0, 0, 0.05);text-align:center;margin-top:16px;h3{font-size:24px;font-weight:700;margin-bottom:40px;position:relative;width:100%;&:after{content:'';width:40px;height:5px;background-color:\",state.theme.colors.darkGray,\";position:absolute;left:calc(50% - 20px);bottom:-20px;}}p{font-size:16px;font-weight:300;line-height:17px;letter-spacing:1px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const Mission=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg3\",label:\"Mission\"})(\"background-color:\",state.theme.colors.darkBlue,\";padding:\",sectionPadding,\";color:#ffffff;h2{font-weight:800;&:after{width:80px;height:10px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const WhyUs=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg2\",label:\"WhyUs\"})(\"padding:\",sectionPadding,\";h2{font-weight:800;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const WhyUsBox=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"article\", false?undefined:{target:\"ebbr1eg1\",label:\"WhyUsBox\"})(\"padding:40px 30px;background-color:\",state.theme.colors.lightGrayBlue,\";border-radius:8px;text-align:center;h3{font-size:28px;font-weight:900;}p{font-size:16px;font-weight:300;line-height:17px;margin:0;}img{margin-bottom:10px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3NhbS9TaXRlcy9raW5jYXJlLWZyb250aXR5L3BhY2thZ2VzL2tpbmNhcmUtdGhlbWUvc3JjL2NvbXBvbmVudHMvcGFnZXMvSG9tZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzSG1DIiwiZmlsZSI6Ii9ob21lL3NhbS9TaXRlcy9raW5jYXJlLWZyb250aXR5L3BhY2thZ2VzL2tpbmNhcmUtdGhlbWUvc3JjL2NvbXBvbmVudHMvcGFnZXMvSG9tZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSAnZnJvbnRpdHknXG5pbXBvcnQgeyBXYXlwb2ludCB9IGZyb20gJ3JlYWN0LXdheXBvaW50J1xuaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCdcblxuaW1wb3J0IENvbnRhY3RGb3JtIGZyb20gJy4uL3BhcnRzL0NvbnRhY3RGb3JtJ1xuXG5jb25zdCBIb21lID0gKHsgc3RhdGUsIHBhZ2UgfSkgPT4ge1xuICAgIGNvbnN0IFtwb3B1bGF0ZWQsIHNldFBvcHVsYXRlZF0gPSB1c2VTdGF0ZSh7XG4gICAgICAgIHdoYXRfd2Vfb2ZmZXI6IGZhbHNlLFxuICAgICAgICBzZXJ2aWNlczogZmFsc2UsXG4gICAgICAgIG1pc3Npb246IGZhbHNlLFxuICAgICAgICB3aHlfdXM6IGZhbHNlXG4gICAgfSlcblxuICAgIGNvbnN0IHsgd2hvX3dlX2FyZSwgd2hhdF93ZV9vZmZlciwgc2VydmljZXMsIG91cl9taXNzaW9uLCB3aHlfdXMgfSA9IHBhZ2UuYWNmXG5cbiAgICBsZXQgc2VjdGlvblBhZGRpbmcgPSAnNDhweCAzMnB4J1xuXG4gICAgY29uc3QgV2hvV2VBcmUgPSBzdHlsZWQuc2VjdGlvbmBcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjoke3N0YXRlLnRoZW1lLmNvbG9ycy5kYXJrQmx1ZX07XG4gICAgICAgIHBhZGRpbmc6JHtzZWN0aW9uUGFkZGluZ307XG4gICAgICAgIGNvbG9yOiNmZmZmZmY7XG4gICAgICAgIGgyIHtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OmJvbGQ7XG4gICAgICAgIH1cbiAgICAgICAgcCB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMGVtO1xuICAgICAgICB9XG4gICAgYFxuXG4gICAgY29uc3QgV2hhdFdlT2ZmZXIgPSBzdHlsZWQuc2VjdGlvbmBcbiAgICAgICAgcGFkZGluZzoke3NlY3Rpb25QYWRkaW5nfTtcbiAgICAgICAgaDIge1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6Ym9sZDtcbiAgICAgICAgfVxuICAgICAgICBpbWcge1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czo4cHg7XG4gICAgICAgIH1cbiAgICAgICAgcCB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMGVtO1xuICAgICAgICB9XG4gICAgYFxuXG4gICAgY29uc3QgU2VydmljZXMgPSBzdHlsZWQuc2VjdGlvbmBcbiAgICAgICAgcGFkZGluZzoke3NlY3Rpb25QYWRkaW5nfTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjoke3N0YXRlLnRoZW1lLmNvbG9ycy5saWdodEdyYXlCbHVlfTtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6Jyc7XG4gICAgICAgICAgICB3aWR0aDowO1xuICAgICAgICAgICAgaGVpZ2h0OjA7XG4gICAgICAgICAgICBib3JkZXItc3R5bGU6c29saWQ7XG4gICAgICAgICAgICBib3JkZXItd2lkdGg6MzRweCAzN3B4IDAgMzdweDtcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjojZmZmZmZmIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgICAgICBsZWZ0OmNhbGMoNTAlIC0gMzdweCk7XG4gICAgICAgICAgICB0b3A6LTJweDtcbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IFNlcnZpY2VCb3ggPSBzdHlsZWQuYXJ0aWNsZWBcbiAgICAgICAgcGFkZGluZzoxNnB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiNmZmZmZmY7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6OHB4O1xuICAgICAgICBib3gtc2hhZG93OiAwcHggMTVweCAyNHB4IHJnYmEoMCwgMCwgMCwgMC4wNSk7XG4gICAgICAgIHRleHQtYWxpZ246Y2VudGVyO1xuICAgICAgICBtYXJnaW4tdG9wOjE2cHg7XG4gICAgICAgIGgzIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOjQwcHg7XG4gICAgICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgICAgICAgIHdpZHRoOjEwMCU7XG4gICAgICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OicnO1xuICAgICAgICAgICAgICAgIHdpZHRoOjQwcHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OjVweDtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiR7c3RhdGUudGhlbWUuY29sb3JzLmRhcmtHcmF5fTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICBsZWZ0OmNhbGMoNTAlIC0gMjBweCk7XG4gICAgICAgICAgICAgICAgYm90dG9tOi0yMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHAge1xuICAgICAgICAgICAgZm9udC1zaXplOjE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDozMDA7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDoxN3B4O1xuICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6MXB4O1xuICAgICAgICB9XG4gICAgYFxuXG4gICAgY29uc3QgTWlzc2lvbiA9IHN0eWxlZC5zZWN0aW9uYFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiR7c3RhdGUudGhlbWUuY29sb3JzLmRhcmtCbHVlfTtcbiAgICAgICAgcGFkZGluZzoke3NlY3Rpb25QYWRkaW5nfTtcbiAgICAgICAgY29sb3I6I2ZmZmZmZjtcbiAgICAgICAgaDIge1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6ODAwO1xuICAgICAgICAgICAgJjphZnRlciB7XG4gICAgICAgICAgICAgICAgd2lkdGg6ODBweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6MTBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IFdoeVVzID0gc3R5bGVkLnNlY3Rpb25gXG4gICAgICAgIHBhZGRpbmc6JHtzZWN0aW9uUGFkZGluZ307XG4gICAgICAgIGgyIHtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OjgwMDtcbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IFdoeVVzQm94ID0gc3R5bGVkLmFydGljbGVgXG4gICAgICAgIHBhZGRpbmc6NDBweCAzMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiR7c3RhdGUudGhlbWUuY29sb3JzLmxpZ2h0R3JheUJsdWV9O1xuICAgICAgICBib3JkZXItcmFkaXVzOjhweDtcbiAgICAgICAgdGV4dC1hbGlnbjpjZW50ZXI7XG4gICAgICAgIGgzIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA5MDA7XG4gICAgICAgIH1cbiAgICAgICAgcCB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogMzAwO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE3cHg7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206MTBweDtcbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IENvbnRhY3RTZWN0aW9uID0gc3R5bGVkLnNlY3Rpb25gXG4gICAgICAgIHBhZGRpbmc6JHtzZWN0aW9uUGFkZGluZ307XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6JHtzdGF0ZS50aGVtZS5jb2xvcnMubGlnaHRHcmF5Qmx1ZX07XG4gICAgYFxuICAgIFxuICAgIGNvbnN0IGFuaW1hdGVTZWN0aW9uID0gKHNlY3Rpb24pID0+IHtcbiAgICAgICAgc3dpdGNoKHNlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ3doYXQtd2Utb2ZmZXInOlxuICAgICAgICAgICAgICAgIGlmKCFwb3B1bGF0ZWQud2hhdF93ZV9vZmZlcikge1xuICAgICAgICAgICAgICAgICAgICBnc2FwLmZyb20oYC53aGF0LXdlLW9mZmVyIC5pbWctZmx1aWRgLCB7IHg6IC0zMDAsIG9wYWNpdHk6IDAsIGR1cmF0aW9uOiAwLjUgfSlcbiAgICAgICAgICAgICAgICAgICAgZ3NhcC5mcm9tKCcud2hhdC13ZS1vZmZlciBoMiwgLndoYXQtd2Utb2ZmZXIgcCcsIHsgeDogLTQwMCwgb3BhY2l0eTogMCwgZHVyYXRpb246IDAuMzUsIHN0YWdnZXI6IDAuMTUsIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFBvcHVsYXRlZChwcmV2U3RhdGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLnByZXZTdGF0ZSwgd2hhdF93ZV9vZmZlcjogdHJ1ZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9fSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ3NlcnZpY2VzJzpcbiAgICAgICAgICAgICAgICBpZighcG9wdWxhdGVkLnNlcnZpY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGdzYXAuZnJvbSgnLnNlcnZpY2UtYm94Jywge30pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxXaG9XZUFyZT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wgY29sLTEyIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPnt3aG9fd2VfYXJlLnRpdGxlfTwvaDI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3dob193ZV9hcmUuY29udGVudH08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1dob1dlQXJlPlxuICAgICAgICAgICAgPFdheXBvaW50IG9uRW50ZXI9eygpID0+IGFuaW1hdGVTZWN0aW9uKCd3aGF0LXdlLW9mZmVyJyl9IHRvcE9mZnNldD0nNTAlJz5cbiAgICAgICAgICAgICAgICA8V2hhdFdlT2ZmZXIgY2xhc3NOYW1lPVwid2hhdC13ZS1vZmZlclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sIGNvbC0xMiBjb2wteGwtNFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImltZy1mbHVpZFwiIHNyYz17d2hhdF93ZV9vZmZlci5pbWFnZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbCBjb2wtMTIgY29sLXhsLTQgZC1mbGV4IGZsZXgtY29sdW1uIGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPnt3aGF0X3dlX29mZmVyLnRpdGxlfTwvaDI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt3aGF0X3dlX29mZmVyLmNvbnRlbnR9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvV2hhdFdlT2ZmZXI+XG4gICAgICAgICAgICA8L1dheXBvaW50PlxuICAgICAgICAgICAgPFNlcnZpY2VzPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEyIGNvbC1tZC02IGNvbC14bC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlcnZpY2VCb3ggY2xhc3NOYW1lPVwic2VydmljZS1ib3hcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3NlcnZpY2VzLnNlcnZpY2VfMS5pY29ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+e3NlcnZpY2VzLnNlcnZpY2VfMS5uYW1lfTwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPntzZXJ2aWNlcy5zZXJ2aWNlXzEuZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VydmljZUJveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgY29sLW1kLTYgY29sLXhsLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VydmljZUJveCBjbGFzc05hbWU9XCJzZXJ2aWNlLWJveFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17c2VydmljZXMuc2VydmljZV8yLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57c2VydmljZXMuc2VydmljZV8yLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3NlcnZpY2VzLnNlcnZpY2VfMi5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtbWQtNiBjb2wteGwtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJ2aWNlQm94IGNsYXNzTmFtZT1cInNlcnZpY2UtYm94XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtzZXJ2aWNlcy5zZXJ2aWNlXzMuaWNvbn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPntzZXJ2aWNlcy5zZXJ2aWNlXzMubmFtZX08L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57c2VydmljZXMuc2VydmljZV8zLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlcnZpY2VCb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1NlcnZpY2VzPlxuICAgICAgICAgICAgPE1pc3Npb24+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wgY29sLTEyIGNvbC14bC04XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPntvdXJfbWlzc2lvbi50aXRsZX08L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPntvdXJfbWlzc2lvbi5jb250ZW50fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvTWlzc2lvbj5cbiAgICAgICAgICAgIDxXaHlVcz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbCBjb2wtMTIgY29sLXhsLTggdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+e3doeV91cy50aXRsZX08L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt3aHlfdXMuY29udGVudH08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGp1c3RpZnktY29udGVudC1jZW50ZXIgcHQtNFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgY29sLW1kLTYgY29sLXhsLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8V2h5VXNCb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt3aHlfdXMucmVhc29uXzEuaWNvbn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPnt3aHlfdXMucmVhc29uXzEubmFtZX08L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57d2h5X3VzLnJlYXNvbl8xLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1doeVVzQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtbWQtNiBjb2wteGwtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxXaHlVc0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3doeV91cy5yZWFzb25fMi5pY29ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+e3doeV91cy5yZWFzb25fMi5uYW1lfTwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt3aHlfdXMucmVhc29uXzIuZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvV2h5VXNCb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEyIGNvbC1tZC02IGNvbC14bC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFdoeVVzQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17d2h5X3VzLnJlYXNvbl8zLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57d2h5X3VzLnJlYXNvbl8zLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3doeV91cy5yZWFzb25fMy5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9XaHlVc0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sIHB0LTUgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXt3aHlfdXMuY3RhLmxpbmtfdG99Pnt3aHlfdXMuY3RhLmxpbmtfdGV4dH08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1doeVVzPlxuICAgICAgICAgICAgPENvbnRhY3RTZWN0aW9uPlxuICAgICAgICAgICAgICAgIDxDb250YWN0Rm9ybSAvPlxuICAgICAgICAgICAgPC9Db250YWN0U2VjdGlvbj5cbiAgICAgICAgPC8+XG4gICAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEhvbWUpIl19 */\"));const ContactSection=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg0\",label:\"ContactSection\"})(\"padding:\",sectionPadding,\";background-color:\",state.theme.colors.lightGrayBlue,\";\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const animateSection=section=>{switch(section){case'what-we-offer':if(!populated.what_we_offer){gsap__WEBPACK_IMPORTED_MODULE_6__[\"default\"].from(`.what-we-offer .img-fluid`,{x:-300,opacity:0,duration:0.5});gsap__WEBPACK_IMPORTED_MODULE_6__[\"default\"].from('.what-we-offer h2, .what-we-offer p',{x:-400,opacity:0,duration:0.35,stagger:0.15,onComplete:()=>{setPopulated(prevState=>{return _objectSpread(_objectSpread({},prevState),{},{what_we_offer:true});});}});}break;case'services':if(!populated.services){gsap__WEBPACK_IMPORTED_MODULE_6__[\"default\"].from('.service-box',{});}}};return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(WhoWeAre,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"row\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"col col-12 text-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h2\",{children:who_we_are.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:who_we_are.content})]})})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_waypoint__WEBPACK_IMPORTED_MODULE_5__[\"Waypoint\"],{onEnter:()=>animateSection('what-we-offer'),topOffset:\"50%\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(WhatWeOffer,{className:\"what-we-offer\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"row justify-content-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col col-12 col-xl-4\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{className:\"img-fluid\",src:what_we_offer.image})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"col col-12 col-xl-4 d-flex flex-column justify-content-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h2\",{children:what_we_offer.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:what_we_offer.content})]})]})})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Services,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"row justify-content-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col-12 col-md-6 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(ServiceBox,{className:\"service-box\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:services.service_1.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",{children:services.service_1.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:services.service_1.description})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col-12 col-md-6 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(ServiceBox,{className:\"service-box\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:services.service_2.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",{children:services.service_2.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:services.service_2.description})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col-12 col-md-6 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(ServiceBox,{className:\"service-box\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:services.service_3.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",{children:services.service_3.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:services.service_3.description})]})})]})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Mission,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"row justify-content-center\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"col col-12 col-xl-8\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h2\",{children:our_mission.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:our_mission.content})]})})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(WhyUs,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"container\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"row justify-content-center\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"col col-12 col-xl-8 text-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h2\",{children:why_us.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:why_us.content})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"row justify-content-center pt-4\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col-12 col-md-6 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(WhyUsBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:why_us.reason_1.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",{children:why_us.reason_1.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:why_us.reason_1.description})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col-12 col-md-6 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(WhyUsBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:why_us.reason_2.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",{children:why_us.reason_2.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:why_us.reason_2.description})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col-12 col-md-6 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(WhyUsBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:why_us.reason_3.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",{children:why_us.reason_3.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:why_us.reason_3.description})]})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"row\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col pt-5 text-center\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"a\",{href:why_us.cta.link_to,children:why_us.cta.link_text})})})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(ContactSection,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_parts_ContactForm__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{})})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"connect\"])(Home));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/kincare-theme/src/components/pages/Home.js\n");

/***/ })

})