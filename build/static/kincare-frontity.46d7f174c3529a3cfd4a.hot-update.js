webpackHotUpdate("kincare-frontity",{

/***/ "./packages/kincare-theme/src/components/pages/Home.js":
/*!*************************************************************!*\
  !*** ./packages/kincare-theme/src/components/pages/Home.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gsap */ \"./node_modules/gsap/index.js\");\n/* harmony import */ var gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! gsap/ScrollTrigger */ \"./node_modules/gsap/ScrollTrigger.js\");\n/* harmony import */ var _parts_ContactForm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../parts/ContactForm */ \"./packages/kincare-theme/src/components/parts/ContactForm.js\");\n/* harmony import */ var _img_dots_square_png__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../img/dots-square.png */ \"./packages/kincare-theme/src/img/dots-square.png\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nconst Home=({state,page})=>{gsap__WEBPACK_IMPORTED_MODULE_5__[\"default\"].registerPlugin(gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_6__[\"ScrollTrigger\"]);const homeRefs=Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])(null);const[populated,setPopulated]=Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])({what_we_offer:false,services:false,mission:false,why_us:false});const{who_we_are,what_we_offer,services,our_mission,why_us}=page.acf;let sectionPadding='48px 32px';const WhoWeAre=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg7\",label:\"WhoWeAre\"})(\"background-color:\",state.theme.colors.darkBlue,\";padding:\",sectionPadding,\";color:#ffffff;h2{font-weight:bold;}p{font-size:16px;font-weight:400;line-height:22px;letter-spacing:0em;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const WhatWeOffer=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg6\",label:\"WhatWeOffer\"})(\"padding:\",sectionPadding,\";h2{font-weight:bold;}img{border-radius:8px;}p{font-size:16px;font-weight:400;line-height:22px;letter-spacing:0em;}.image-container{position:relative;.dots-1{width:170px;height:170px;position:absolute;z-index:-1;left:-60px;bottom:-25px;}.dots-2{width:170px;height:170px;position:absolute;z-index:-1;right:-10px;top:10px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const Services=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg5\",label:\"Services\"})(\"padding:\",sectionPadding,\";background-color:\",state.theme.colors.lightGrayBlue,\";position:relative;&:before{content:'';width:0;height:0;border-style:solid;border-width:34px 37px 0 37px;border-color:#ffffff transparent transparent transparent;position:absolute;left:calc(50% - 37px);top:-2px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const ServiceBox=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"article\", false?undefined:{target:\"ebbr1eg4\",label:\"ServiceBox\"})(\"padding:16px;background-color:#ffffff;border-radius:8px;box-shadow:0px 15px 24px rgba(0, 0, 0, 0.05);text-align:center;margin-top:16px;h3{font-size:24px;font-weight:700;margin-bottom:40px;position:relative;width:100%;&:after{content:'';width:40px;height:5px;background-color:\",state.theme.colors.darkGray,\";position:absolute;left:calc(50% - 20px);bottom:-20px;}}p{font-size:16px;font-weight:300;line-height:17px;letter-spacing:1px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const Mission=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg3\",label:\"Mission\"})(\"background-color:\",state.theme.colors.darkBlue,\";padding:\",sectionPadding,\";color:#ffffff;h2{font-weight:800;&:after{width:80px;height:10px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const WhyUs=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg2\",label:\"WhyUs\"})(\"padding:\",sectionPadding,\";h2{font-weight:800;}.cta{font-size:24px;font-weight:700;line-height:29px;text-align:center;color:\",state.theme.colors.orange,\";text-decoration:none;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const WhyUsBox=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"article\", false?undefined:{target:\"ebbr1eg1\",label:\"WhyUsBox\"})(\"padding:40px 30px;background-color:\",state.theme.colors.lightGrayBlue,\";border-radius:8px;text-align:center;margin-bottom:1rem;h3{font-size:28px;font-weight:900;}p{font-size:16px;font-weight:300;line-height:17px;margin:0;}img{margin-bottom:10px;}@media (min-width:992px){margin-bottom:0;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const ContactSection=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg0\",label:\"ContactSection\"})(\"padding:\",sectionPadding,\";background-color:\",state.theme.colors.lightGrayBlue,\";\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3NhbS9EZXNrdG9wL1NpdGVzL2tpbmNhcmUtZnJvbnRpdHkvcGFja2FnZXMva2luY2FyZS10aGVtZS9zcmMvY29tcG9uZW50cy9wYWdlcy9Ib21lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThLeUMiLCJmaWxlIjoiL2hvbWUvc2FtL0Rlc2t0b3AvU2l0ZXMva2luY2FyZS1mcm9udGl0eS9wYWNrYWdlcy9raW5jYXJlLXRoZW1lL3NyYy9jb21wb25lbnRzL3BhZ2VzL0hvbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQgfSBmcm9tICdmcm9udGl0eSdcbmltcG9ydCBnc2FwIGZyb20gJ2dzYXAnXG5pbXBvcnQgeyBTY3JvbGxUcmlnZ2VyIH0gZnJvbSAnZ3NhcC9TY3JvbGxUcmlnZ2VyJ1xuXG5pbXBvcnQgQ29udGFjdEZvcm0gZnJvbSAnLi4vcGFydHMvQ29udGFjdEZvcm0nXG5pbXBvcnQgZG90c1NxdWFyZSBmcm9tICcuLi8uLi9pbWcvZG90cy1zcXVhcmUucG5nJ1xuXG5jb25zdCBIb21lID0gKHsgc3RhdGUsIHBhZ2UgfSkgPT4ge1xuICAgIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcik7XG5cbiAgICBjb25zdCBob21lUmVmcyA9IHVzZVJlZihudWxsKVxuXG4gICAgY29uc3QgW3BvcHVsYXRlZCwgc2V0UG9wdWxhdGVkXSA9IHVzZVN0YXRlKHtcbiAgICAgICAgd2hhdF93ZV9vZmZlcjogZmFsc2UsXG4gICAgICAgIHNlcnZpY2VzOiBmYWxzZSxcbiAgICAgICAgbWlzc2lvbjogZmFsc2UsXG4gICAgICAgIHdoeV91czogZmFsc2VcbiAgICB9KVxuXG4gICAgY29uc3QgeyB3aG9fd2VfYXJlLCB3aGF0X3dlX29mZmVyLCBzZXJ2aWNlcywgb3VyX21pc3Npb24sIHdoeV91cyB9ID0gcGFnZS5hY2ZcblxuICAgIGxldCBzZWN0aW9uUGFkZGluZyA9ICc0OHB4IDMycHgnXG5cbiAgICBjb25zdCBXaG9XZUFyZSA9IHN0eWxlZC5zZWN0aW9uYFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiR7c3RhdGUudGhlbWUuY29sb3JzLmRhcmtCbHVlfTtcbiAgICAgICAgcGFkZGluZzoke3NlY3Rpb25QYWRkaW5nfTtcbiAgICAgICAgY29sb3I6I2ZmZmZmZjtcbiAgICAgICAgaDIge1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6Ym9sZDtcbiAgICAgICAgfVxuICAgICAgICBwIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjJweDtcbiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAwZW07XG4gICAgICAgIH1cbiAgICBgXG5cbiAgICBjb25zdCBXaGF0V2VPZmZlciA9IHN0eWxlZC5zZWN0aW9uYFxuICAgICAgICBwYWRkaW5nOiR7c2VjdGlvblBhZGRpbmd9O1xuICAgICAgICBoMiB7XG4gICAgICAgICAgICBmb250LXdlaWdodDpib2xkO1xuICAgICAgICB9XG4gICAgICAgIGltZyB7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOjhweDtcbiAgICAgICAgfVxuICAgICAgICBwIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjJweDtcbiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAwZW07XG4gICAgICAgIH1cbiAgICAgICAgLmltYWdlLWNvbnRhaW5lciB7XG4gICAgICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgICAgICAgIC5kb3RzLTEge1xuICAgICAgICAgICAgICAgIHdpZHRoOjE3MHB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDoxNzBweDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICB6LWluZGV4Oi0xO1xuICAgICAgICAgICAgICAgIGxlZnQ6LTYwcHg7XG4gICAgICAgICAgICAgICAgYm90dG9tOi0yNXB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmRvdHMtMiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6MTcwcHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OjE3MHB4O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICAgICAgICAgIHotaW5kZXg6LTE7XG4gICAgICAgICAgICAgICAgcmlnaHQ6LTEwcHg7XG4gICAgICAgICAgICAgICAgdG9wOjEwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBgXG5cbiAgICBjb25zdCBTZXJ2aWNlcyA9IHN0eWxlZC5zZWN0aW9uYFxuICAgICAgICBwYWRkaW5nOiR7c2VjdGlvblBhZGRpbmd9O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiR7c3RhdGUudGhlbWUuY29sb3JzLmxpZ2h0R3JheUJsdWV9O1xuICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgICAgJjpiZWZvcmUge1xuICAgICAgICAgICAgY29udGVudDonJztcbiAgICAgICAgICAgIHdpZHRoOjA7XG4gICAgICAgICAgICBoZWlnaHQ6MDtcbiAgICAgICAgICAgIGJvcmRlci1zdHlsZTpzb2xpZDtcbiAgICAgICAgICAgIGJvcmRlci13aWR0aDozNHB4IDM3cHggMCAzN3B4O1xuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiNmZmZmZmYgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgICAgIGxlZnQ6Y2FsYyg1MCUgLSAzN3B4KTtcbiAgICAgICAgICAgIHRvcDotMnB4O1xuICAgICAgICB9XG4gICAgYFxuXG4gICAgY29uc3QgU2VydmljZUJveCA9IHN0eWxlZC5hcnRpY2xlYFxuICAgICAgICBwYWRkaW5nOjE2cHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6I2ZmZmZmZjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czo4cHg7XG4gICAgICAgIGJveC1zaGFkb3c6IDBweCAxNXB4IDI0cHggcmdiYSgwLCAwLCAwLCAwLjA1KTtcbiAgICAgICAgdGV4dC1hbGlnbjpjZW50ZXI7XG4gICAgICAgIG1hcmdpbi10b3A6MTZweDtcbiAgICAgICAgaDMge1xuICAgICAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206NDBweDtcbiAgICAgICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICAgICAgd2lkdGg6MTAwJTtcbiAgICAgICAgICAgICY6YWZ0ZXIge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6Jyc7XG4gICAgICAgICAgICAgICAgd2lkdGg6NDBweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6NXB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6JHtzdGF0ZS50aGVtZS5jb2xvcnMuZGFya0dyYXl9O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICAgICAgICAgIGxlZnQ6Y2FsYyg1MCUgLSAyMHB4KTtcbiAgICAgICAgICAgICAgICBib3R0b206LTIwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcCB7XG4gICAgICAgICAgICBmb250LXNpemU6MTZweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OjMwMDtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OjE3cHg7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzoxcHg7XG4gICAgICAgIH1cbiAgICBgXG5cbiAgICBjb25zdCBNaXNzaW9uID0gc3R5bGVkLnNlY3Rpb25gXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6JHtzdGF0ZS50aGVtZS5jb2xvcnMuZGFya0JsdWV9O1xuICAgICAgICBwYWRkaW5nOiR7c2VjdGlvblBhZGRpbmd9O1xuICAgICAgICBjb2xvcjojZmZmZmZmO1xuICAgICAgICBoMiB7XG4gICAgICAgICAgICBmb250LXdlaWdodDo4MDA7XG4gICAgICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICAgICAgICB3aWR0aDo4MHB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDoxMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgYFxuXG4gICAgY29uc3QgV2h5VXMgPSBzdHlsZWQuc2VjdGlvbmBcbiAgICAgICAgcGFkZGluZzoke3NlY3Rpb25QYWRkaW5nfTtcbiAgICAgICAgaDIge1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6ODAwO1xuICAgICAgICB9XG4gICAgICAgIC5jdGEge1xuICAgICAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyOXB4O1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgY29sb3I6JHtzdGF0ZS50aGVtZS5jb2xvcnMub3JhbmdlfTtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjpub25lO1xuICAgICAgICB9XG4gICAgYFxuXG4gICAgY29uc3QgV2h5VXNCb3ggPSBzdHlsZWQuYXJ0aWNsZWBcbiAgICAgICAgcGFkZGluZzo0MHB4IDMwcHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6JHtzdGF0ZS50aGVtZS5jb2xvcnMubGlnaHRHcmF5Qmx1ZX07XG4gICAgICAgIGJvcmRlci1yYWRpdXM6OHB4O1xuICAgICAgICB0ZXh0LWFsaWduOmNlbnRlcjtcbiAgICAgICAgbWFyZ2luLWJvdHRvbToxcmVtO1xuICAgICAgICBoMyB7XG4gICAgICAgICAgICBmb250LXNpemU6IDI4cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogOTAwO1xuICAgICAgICB9XG4gICAgICAgIHAge1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICB9XG4gICAgICAgIGltZyB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOjEwcHg7XG4gICAgICAgIH1cbiAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6OTkycHgpIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206MDtcbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IENvbnRhY3RTZWN0aW9uID0gc3R5bGVkLnNlY3Rpb25gXG4gICAgICAgIHBhZGRpbmc6JHtzZWN0aW9uUGFkZGluZ307XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6JHtzdGF0ZS50aGVtZS5jb2xvcnMubGlnaHRHcmF5Qmx1ZX07XG4gICAgYFxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgZ3NhcC5mcm9tVG8oaG9tZVJlZnMuY3VycmVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VydmljZS1ib3gnKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB5OiA1MDAsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDAuNzUsXG4gICAgICAgICAgICAgICAgc3RhZ2dlcjogMC4yNSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZXJ2aWNlcy10cmlnZ2VyJyksXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiAndG9wIGJvdHRvbSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIClcblxuICAgICAgICBnc2FwLmZyb21Ubyhob21lUmVmcy5jdXJyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5taXNzaW9uJyksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeTogNTAwLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjc1LFxuICAgICAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pc3Npb24tdHJpZ2dlcicpLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogJ3RvcCBib3R0b20nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICBnc2FwLmZyb21Ubyhob21lUmVmcy5jdXJyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy53aHktdXMtYm94JyksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICBzY2FsZTogMC41XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgc2NhbGU6IDEsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDAuNzUsXG4gICAgICAgICAgICAgICAgc3RhZ2dlcjogMC4yNSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3aHktdXMtdHJpZ2dlcicpLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogJ3RvcCBib3R0b20nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApXG5cbiAgICB9LCBbXSlcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgcmVmPXtob21lUmVmc30+XG5cbiAgICAgICAgICAgIDxXaG9XZUFyZT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbCBjb2wtMTIgY29sLWxnLTggdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+e3dob193ZV9hcmUudGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57d2hvX3dlX2FyZS5jb250ZW50fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvV2hvV2VBcmU+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxXaGF0V2VPZmZlciBjbGFzc05hbWU9XCJ3aGF0LXdlLW9mZmVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wgY29sLTEyIGNvbC14bC00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbWFnZS1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkb3RzLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtkb3RzU3F1YXJlfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkb3RzLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtkb3RzU3F1YXJlfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJpbWctZmx1aWRcIiBzcmM9e3doYXRfd2Vfb2ZmZXIuaW1hZ2V9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sIGNvbC0xMiBjb2wteGwtNCBkLWZsZXggZmxleC1jb2x1bW4ganVzdGlmeS1jb250ZW50LWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJtdC0zIG10LW1kLTBcIj57d2hhdF93ZV9vZmZlci50aXRsZX08L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt3aGF0X3dlX29mZmVyLmNvbnRlbnR9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9XaGF0V2VPZmZlcj5cblxuICAgICAgICAgICAgPFNlcnZpY2VzPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyLWxnXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJzZXJ2aWNlcy10cmlnZ2VyXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtbWQtNCBjb2wteGwtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJ2aWNlQm94IGNsYXNzTmFtZT1cInNlcnZpY2UtYm94XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtzZXJ2aWNlcy5zZXJ2aWNlXzEuaWNvbn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPntzZXJ2aWNlcy5zZXJ2aWNlXzEubmFtZX08L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57c2VydmljZXMuc2VydmljZV8xLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlcnZpY2VCb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEyIGNvbC1tZC00IGNvbC14bC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlcnZpY2VCb3ggY2xhc3NOYW1lPVwic2VydmljZS1ib3hcIiByZWY9e2hvbWVSZWZzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3NlcnZpY2VzLnNlcnZpY2VfMi5pY29ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+e3NlcnZpY2VzLnNlcnZpY2VfMi5uYW1lfTwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPntzZXJ2aWNlcy5zZXJ2aWNlXzIuZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VydmljZUJveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgY29sLW1kLTQgY29sLXhsLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VydmljZUJveCBjbGFzc05hbWU9XCJzZXJ2aWNlLWJveFwiIHJlZj17aG9tZVJlZnN9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17c2VydmljZXMuc2VydmljZV8zLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57c2VydmljZXMuc2VydmljZV8zLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3NlcnZpY2VzLnNlcnZpY2VfMy5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9TZXJ2aWNlcz5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGRpdiBpZD1cIm1pc3Npb24tdHJpZ2dlclwiPjwvZGl2PlxuICAgICAgICAgICAgPE1pc3Npb24gY2xhc3NOYW1lPVwibWlzc2lvblwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sIGNvbC0xMiBjb2wteGwtOFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj57b3VyX21pc3Npb24udGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57b3VyX21pc3Npb24uY29udGVudH08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L01pc3Npb24+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxXaHlVcz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbCBjb2wtMTIgY29sLXhsLTggdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+e3doeV91cy50aXRsZX08L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt3aHlfdXMuY29udGVudH08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cIndoeS11cy10cmlnZ2VyXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGp1c3RpZnktY29udGVudC1jZW50ZXIgcHQtNFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgY29sLW1kLTQgY29sLXhsLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8V2h5VXNCb3ggY2xhc3NOYW1lPVwid2h5LXVzLWJveFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17d2h5X3VzLnJlYXNvbl8xLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57d2h5X3VzLnJlYXNvbl8xLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3doeV91cy5yZWFzb25fMS5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9XaHlVc0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgY29sLW1kLTQgY29sLXhsLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8V2h5VXNCb3ggY2xhc3NOYW1lPVwid2h5LXVzLWJveFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17d2h5X3VzLnJlYXNvbl8yLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57d2h5X3VzLnJlYXNvbl8yLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3doeV91cy5yZWFzb25fMi5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9XaHlVc0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgY29sLW1kLTQgY29sLXhsLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8V2h5VXNCb3ggY2xhc3NOYW1lPVwid2h5LXVzLWJveFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17d2h5X3VzLnJlYXNvbl8zLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57d2h5X3VzLnJlYXNvbl8zLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3doeV91cy5yZWFzb25fMy5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9XaHlVc0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sIHB0LTUgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjdGFcIiBocmVmPXt3aHlfdXMuY3RhLmxpbmtfdG99Pnt3aHlfdXMuY3RhLmxpbmtfdGV4dH08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1doeVVzPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8Q29udGFjdFNlY3Rpb24+XG4gICAgICAgICAgICAgICAgPGgyPkdldCBJbiBUb3VjaDwvaDI+XG4gICAgICAgICAgICAgICAgPENvbnRhY3RGb3JtIGRhdGE9e2RhdGF9IC8+XG4gICAgICAgICAgICA8L0NvbnRhY3RTZWN0aW9uPlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoSG9tZSkiXX0= */\"));Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(()=>{gsap__WEBPACK_IMPORTED_MODULE_5__[\"default\"].fromTo(homeRefs.current.querySelectorAll('.service-box'),{y:500,opacity:0},{y:0,opacity:1,duration:0.75,stagger:0.25,scrollTrigger:{trigger:document.getElementById('services-trigger'),start:'top bottom'}});gsap__WEBPACK_IMPORTED_MODULE_5__[\"default\"].fromTo(homeRefs.current.querySelectorAll('.mission'),{y:500,opacity:0},{y:0,opacity:1,duration:0.75,scrollTrigger:{trigger:document.getElementById('mission-trigger'),start:'top bottom'}});gsap__WEBPACK_IMPORTED_MODULE_5__[\"default\"].fromTo(homeRefs.current.querySelectorAll('.why-us-box'),{opacity:0,scale:0.5},{opacity:1,scale:1,duration:0.75,stagger:0.25,scrollTrigger:{trigger:document.getElementById('why-us-trigger'),start:'top bottom'}});},[]);return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(\"div\",{ref:homeRefs,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(WhoWeAre,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"row justify-content-center\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(\"div\",{className:\"col col-12 col-lg-8 text-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h2\",{children:who_we_are.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:who_we_are.content})]})})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(WhatWeOffer,{className:\"what-we-offer\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(\"div\",{className:\"row justify-content-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"col col-12 col-xl-4\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(\"div\",{className:\"image-container\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"dots-1\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{src:_img_dots_square_png__WEBPACK_IMPORTED_MODULE_8__[\"default\"]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"dots-2\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{src:_img_dots_square_png__WEBPACK_IMPORTED_MODULE_8__[\"default\"]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{className:\"img-fluid\",src:what_we_offer.image})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(\"div\",{className:\"col col-12 col-xl-4 d-flex flex-column justify-content-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h2\",{className:\"mt-3 mt-md-0\",children:what_we_offer.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:what_we_offer.content})]})]})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Services,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"container-lg\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(\"div\",{className:\"row justify-content-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{id:\"services-trigger\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"col-12 col-md-4 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(ServiceBox,{className:\"service-box\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{src:services.service_1.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h3\",{children:services.service_1.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:services.service_1.description})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"col-12 col-md-4 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(ServiceBox,{className:\"service-box\",ref:homeRefs,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{src:services.service_2.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h3\",{children:services.service_2.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:services.service_2.description})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"col-12 col-md-4 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(ServiceBox,{className:\"service-box\",ref:homeRefs,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{src:services.service_3.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h3\",{children:services.service_3.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:services.service_3.description})]})})]})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{id:\"mission-trigger\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Mission,{className:\"mission\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"row justify-content-center\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(\"div\",{className:\"col col-12 col-xl-8\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h2\",{children:our_mission.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:our_mission.content})]})})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(WhyUs,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(\"div\",{className:\"container\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"row justify-content-center\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(\"div\",{className:\"col col-12 col-xl-8 text-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h2\",{children:why_us.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:why_us.content}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{id:\"why-us-trigger\"})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(\"div\",{className:\"row justify-content-center pt-4\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"col-12 col-md-4 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(WhyUsBox,{className:\"why-us-box\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{src:why_us.reason_1.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h3\",{children:why_us.reason_1.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:why_us.reason_1.description})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"col-12 col-md-4 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(WhyUsBox,{className:\"why-us-box\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{src:why_us.reason_2.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h3\",{children:why_us.reason_2.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:why_us.reason_2.description})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"col-12 col-md-4 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(WhyUsBox,{className:\"why-us-box\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{src:why_us.reason_3.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h3\",{children:why_us.reason_3.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:why_us.reason_3.description})]})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"row\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"div\",{className:\"col pt-5 text-center\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"a\",{className:\"cta\",href:why_us.cta.link_to,children:why_us.cta.link_text})})})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(ContactSection,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h2\",{children:\"Get In Touch\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(_parts_ContactForm__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{data:data})]})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"connect\"])(Home));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/kincare-theme/src/components/pages/Home.js\n");

/***/ })

})