webpackHotUpdate("kincare-frontity",{

/***/ "./node_modules/consolidated-events/lib/index.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/consolidated-events/lib/index.esm.js ***!
  \***********************************************************/
/*! exports provided: addEventListener */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addEventListener\", function() { return addEventListener; });\nvar CAN_USE_DOM=!!(typeof window!=='undefined'&&window.document&&window.document.createElement);// Adapted from Modernizr\n// https://github.com/Modernizr/Modernizr/blob/acb3f0d9/feature-detects/dom/passiveeventlisteners.js#L26-L37\nfunction testPassiveEventListeners(){if(!CAN_USE_DOM){return false;}if(!window.addEventListener||!window.removeEventListener||!Object.defineProperty){return false;}var supportsPassiveOption=false;try{var opts=Object.defineProperty({},'passive',{// eslint-disable-next-line getter-return\nget:function(){function get(){supportsPassiveOption=true;}return get;}()});var noop=function noop(){};window.addEventListener('testPassiveEventSupport',noop,opts);window.removeEventListener('testPassiveEventSupport',noop,opts);}catch(e){// do nothing\n}return supportsPassiveOption;}var memoized=void 0;function canUsePassiveEventListeners(){if(memoized===undefined){memoized=testPassiveEventListeners();}return memoized;}function normalizeEventOptions(eventOptions){if(!eventOptions){return undefined;}if(!canUsePassiveEventListeners()){// If the browser does not support the passive option, then it is expecting\n// a boolean for the options argument to specify whether it should use\n// capture or not. In more modern browsers, this is passed via the `capture`\n// option, so let's just hoist that value up.\nreturn!!eventOptions.capture;}return eventOptions;}/* eslint-disable no-bitwise */ /**\n * Generate a unique key for any set of event options\n */function eventOptionsKey(normalizedEventOptions){if(!normalizedEventOptions){return 0;}// If the browser does not support passive event listeners, the normalized\n// event options will be a boolean.\nif(normalizedEventOptions===true){return 100;}// At this point, the browser supports passive event listeners, so we expect\n// the event options to be an object with possible properties of capture,\n// passive, and once.\n//\n// We want to consistently return the same value, regardless of the order of\n// these properties, so let's use binary maths to assign each property to a\n// bit, and then add those together (with an offset to account for the\n// booleans at the beginning of this function).\nvar capture=normalizedEventOptions.capture<<0;var passive=normalizedEventOptions.passive<<1;var once=normalizedEventOptions.once<<2;return capture+passive+once;}function ensureCanMutateNextEventHandlers(eventHandlers){if(eventHandlers.handlers===eventHandlers.nextHandlers){// eslint-disable-next-line no-param-reassign\neventHandlers.nextHandlers=eventHandlers.handlers.slice();}}function TargetEventHandlers(target){this.target=target;this.events={};}TargetEventHandlers.prototype.getEventHandlers=function(){function getEventHandlers(eventName,options){var key=String(eventName)+' '+String(eventOptionsKey(options));if(!this.events[key]){this.events[key]={handlers:[],handleEvent:undefined};this.events[key].nextHandlers=this.events[key].handlers;}return this.events[key];}return getEventHandlers;}();TargetEventHandlers.prototype.handleEvent=function(){function handleEvent(eventName,options,event){var eventHandlers=this.getEventHandlers(eventName,options);eventHandlers.handlers=eventHandlers.nextHandlers;eventHandlers.handlers.forEach(function(handler){if(handler){// We need to check for presence here because a handler function may\n// cause later handlers to get removed. This can happen if you for\n// instance have a waypoint that unmounts another waypoint as part of an\n// onEnter/onLeave handler.\nhandler(event);}});}return handleEvent;}();TargetEventHandlers.prototype.add=function(){function add(eventName,listener,options){var _this=this;// options has already been normalized at this point.\nvar eventHandlers=this.getEventHandlers(eventName,options);ensureCanMutateNextEventHandlers(eventHandlers);if(eventHandlers.nextHandlers.length===0){eventHandlers.handleEvent=this.handleEvent.bind(this,eventName,options);this.target.addEventListener(eventName,eventHandlers.handleEvent,options);}eventHandlers.nextHandlers.push(listener);var isSubscribed=true;var unsubscribe=function(){function unsubscribe(){if(!isSubscribed){return;}isSubscribed=false;ensureCanMutateNextEventHandlers(eventHandlers);var index=eventHandlers.nextHandlers.indexOf(listener);eventHandlers.nextHandlers.splice(index,1);if(eventHandlers.nextHandlers.length===0){// All event handlers have been removed, so we want to remove the event\n// listener from the target node.\nif(_this.target){// There can be a race condition where the target may no longer exist\n// when this function is called, e.g. when a React component is\n// unmounting. Guarding against this prevents the following error:\n//\n//   Cannot read property 'removeEventListener' of undefined\n_this.target.removeEventListener(eventName,eventHandlers.handleEvent,options);}eventHandlers.handleEvent=undefined;}}return unsubscribe;}();return unsubscribe;}return add;}();var EVENT_HANDLERS_KEY='__consolidated_events_handlers__';// eslint-disable-next-line import/prefer-default-export\nfunction addEventListener(target,eventName,listener,options){if(!target[EVENT_HANDLERS_KEY]){// eslint-disable-next-line no-param-reassign\ntarget[EVENT_HANDLERS_KEY]=new TargetEventHandlers(target);}var normalizedEventOptions=normalizeEventOptions(options);return target[EVENT_HANDLERS_KEY].add(eventName,listener,normalizedEventOptions);}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/consolidated-events/lib/index.esm.js\n");

/***/ }),

/***/ "./node_modules/react-waypoint/es/index.js":
/*!*************************************************!*\
  !*** ./node_modules/react-waypoint/es/index.js ***!
  \*************************************************/
/*! exports provided: Waypoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Waypoint\", function() { return Waypoint; });\n/* harmony import */ var consolidated_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! consolidated-events */ \"./node_modules/consolidated-events/lib/index.esm.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-is */ \"./node_modules/react-is/index.js\");\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_3__);\nfunction _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _possibleConstructorReturn(self,call){if(call&&(typeof call===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}/**\n * Attempts to parse the offset provided as a prop as a percentage. For\n * instance, if the component has been provided with the string \"20%\" as\n * a value of one of the offset props. If the value matches, then it returns\n * a numeric version of the prop. For instance, \"20%\" would become `0.2`.\n * If `str` isn't a percentage, then `undefined` will be returned.\n *\n * @param {string} str The value of an offset prop to be converted to a\n *   number.\n * @return {number|undefined} The numeric version of `str`. Undefined if `str`\n *   was not a percentage.\n */function parseOffsetAsPercentage(str){if(str.slice(-1)==='%'){return parseFloat(str.slice(0,-1))/100;}return undefined;}/**\n * Attempts to parse the offset provided as a prop as a pixel value. If\n * parsing fails, then `undefined` is returned. Three examples of values that\n * will be successfully parsed are:\n * `20`\n * \"20px\"\n * \"20\"\n *\n * @param {string|number} str A string of the form \"{number}\" or \"{number}px\",\n *   or just a number.\n * @return {number|undefined} The numeric version of `str`. Undefined if `str`\n *   was neither a number nor string ending in \"px\".\n */function parseOffsetAsPixels(str){if(!isNaN(parseFloat(str))&&isFinite(str)){return parseFloat(str);}if(str.slice(-2)==='px'){return parseFloat(str.slice(0,-2));}return undefined;}/**\n * @param {string|number} offset\n * @param {number} contextHeight\n * @return {number} A number representing `offset` converted into pixels.\n */function computeOffsetPixels(offset,contextHeight){var pixelOffset=parseOffsetAsPixels(offset);if(typeof pixelOffset==='number'){return pixelOffset;}var percentOffset=parseOffsetAsPercentage(offset);if(typeof percentOffset==='number'){return percentOffset*contextHeight;}return undefined;}var ABOVE='above';var INSIDE='inside';var BELOW='below';var INVISIBLE='invisible';function debugLog(){if(true){var _console;(_console=console).log.apply(_console,arguments);// eslint-disable-line no-console\n}}/**\n * When an element's type is a string, it represents a DOM node with that tag name\n * https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html#dom-elements\n *\n * @param {React.element} Component\n * @return {bool} Whether the component is a DOM Element\n */function isDOMElement(Component){return typeof Component.type==='string';}var errorMessage='<Waypoint> needs a DOM element to compute boundaries. The child you passed is neither a '+'DOM element (e.g. <div>) nor does it use the innerRef prop.\\n\\n'+'See https://goo.gl/LrBNgw for more info.';/**\n * Raise an error if \"children\" is not a DOM Element and there is no ref provided to Waypoint\n *\n * @param {?React.element} children\n * @param {?HTMLElement} ref\n * @return {undefined}\n */function ensureRefIsProvidedByChild(children,ref){if(children&&!isDOMElement(children)&&!ref){throw new Error(errorMessage);}}/**\n * @param {object} bounds An object with bounds data for the waypoint and\n *   scrollable parent\n * @return {string} The current position of the waypoint in relation to the\n *   visible portion of the scrollable parent. One of the constants `ABOVE`,\n *   `BELOW`, `INSIDE` or `INVISIBLE`.\n */function getCurrentPosition(bounds){if(bounds.viewportBottom-bounds.viewportTop===0){return INVISIBLE;}// top is within the viewport\nif(bounds.viewportTop<=bounds.waypointTop&&bounds.waypointTop<=bounds.viewportBottom){return INSIDE;}// bottom is within the viewport\nif(bounds.viewportTop<=bounds.waypointBottom&&bounds.waypointBottom<=bounds.viewportBottom){return INSIDE;}// top is above the viewport and bottom is below the viewport\nif(bounds.waypointTop<=bounds.viewportTop&&bounds.viewportBottom<=bounds.waypointBottom){return INSIDE;}if(bounds.viewportBottom<bounds.waypointTop){return BELOW;}if(bounds.waypointTop<bounds.viewportTop){return ABOVE;}return INVISIBLE;}var timeout;var timeoutQueue=[];function onNextTick(cb){timeoutQueue.push(cb);if(!timeout){timeout=setTimeout(function(){timeout=null;// Drain the timeoutQueue\nvar item;// eslint-disable-next-line no-cond-assign\nwhile(item=timeoutQueue.shift()){item();}},0);}var isSubscribed=true;return function unsubscribe(){if(!isSubscribed){return;}isSubscribed=false;var index=timeoutQueue.indexOf(cb);if(index===-1){return;}timeoutQueue.splice(index,1);if(!timeoutQueue.length&&timeout){clearTimeout(timeout);timeout=null;}};}function resolveScrollableAncestorProp(scrollableAncestor){// When Waypoint is rendered on the server, `window` is not available.\n// To make Waypoint easier to work with, we allow this to be specified in\n// string form and safely convert to `window` here.\nif(scrollableAncestor==='window'){return global.window;}return scrollableAncestor;}var defaultProps={debug:false,scrollableAncestor:undefined,children:undefined,topOffset:'0px',bottomOffset:'0px',horizontal:false,onEnter:function onEnter(){},onLeave:function onLeave(){},onPositionChange:function onPositionChange(){},fireOnRapidScroll:true};// Calls a function when you scroll to the element.\nvar Waypoint=/*#__PURE__*/function(_React$PureComponent){_inherits(Waypoint,_React$PureComponent);var _super=_createSuper(Waypoint);function Waypoint(props){var _this;_classCallCheck(this,Waypoint);_this=_super.call(this,props);_this.refElement=function(e){_this._ref=e;};return _this;}_createClass(Waypoint,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;if(!Waypoint.getWindow()){return;}// this._ref may occasionally not be set at this time. To help ensure that\n// this works smoothly and to avoid layout thrashing, we want to delay the\n// initial execution until the next tick.\nthis.cancelOnNextTick=onNextTick(function(){_this2.cancelOnNextTick=null;var _this2$props=_this2.props,children=_this2$props.children,debug=_this2$props.debug;// Berofe doing anything, we want to check that this._ref is avaliable in Waypoint\nensureRefIsProvidedByChild(children,_this2._ref);_this2._handleScroll=_this2._handleScroll.bind(_this2);_this2.scrollableAncestor=_this2._findScrollableAncestor();if( true&&debug){debugLog('scrollableAncestor',_this2.scrollableAncestor);}_this2.scrollEventListenerUnsubscribe=Object(consolidated_events__WEBPACK_IMPORTED_MODULE_0__[\"addEventListener\"])(_this2.scrollableAncestor,'scroll',_this2._handleScroll,{passive:true});_this2.resizeEventListenerUnsubscribe=Object(consolidated_events__WEBPACK_IMPORTED_MODULE_0__[\"addEventListener\"])(window,'resize',_this2._handleScroll,{passive:true});_this2._handleScroll(null);});}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var _this3=this;if(!Waypoint.getWindow()){return;}if(!this.scrollableAncestor){// The Waypoint has not yet initialized.\nreturn;}// The element may have moved, so we need to recompute its position on the\n// page. This happens via handleScroll in a way that forces layout to be\n// computed.\n//\n// We want this to be deferred to avoid forcing layout during render, which\n// causes layout thrashing. And, if we already have this work enqueued, we\n// can just wait for that to happen instead of enqueueing again.\nif(this.cancelOnNextTick){return;}this.cancelOnNextTick=onNextTick(function(){_this3.cancelOnNextTick=null;_this3._handleScroll(null);});}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){if(!Waypoint.getWindow()){return;}if(this.scrollEventListenerUnsubscribe){this.scrollEventListenerUnsubscribe();}if(this.resizeEventListenerUnsubscribe){this.resizeEventListenerUnsubscribe();}if(this.cancelOnNextTick){this.cancelOnNextTick();}}/**\n     * Traverses up the DOM to find an ancestor container which has an overflow\n     * style that allows for scrolling.\n     *\n     * @return {Object} the closest ancestor element with an overflow style that\n     *   allows for scrolling. If none is found, the `window` object is returned\n     *   as a fallback.\n     */},{key:\"_findScrollableAncestor\",value:function _findScrollableAncestor(){var _this$props=this.props,horizontal=_this$props.horizontal,scrollableAncestor=_this$props.scrollableAncestor;if(scrollableAncestor){return resolveScrollableAncestorProp(scrollableAncestor);}var node=this._ref;while(node.parentNode){node=node.parentNode;if(node===document.body){// We've reached all the way to the root node.\nreturn window;}var style=window.getComputedStyle(node);var overflowDirec=horizontal?style.getPropertyValue('overflow-x'):style.getPropertyValue('overflow-y');var overflow=overflowDirec||style.getPropertyValue('overflow');if(overflow==='auto'||overflow==='scroll'||overflow==='overlay'){return node;}}// A scrollable ancestor element was not found, which means that we need to\n// do stuff on window.\nreturn window;}/**\n     * @param {Object} event the native scroll event coming from the scrollable\n     *   ancestor, or resize event coming from the window. Will be undefined if\n     *   called by a React lifecyle method\n     */},{key:\"_handleScroll\",value:function _handleScroll(event){if(!this._ref){// There's a chance we end up here after the component has been unmounted.\nreturn;}var bounds=this._getBounds();var currentPosition=getCurrentPosition(bounds);var previousPosition=this._previousPosition;var _this$props2=this.props,debug=_this$props2.debug,onPositionChange=_this$props2.onPositionChange,onEnter=_this$props2.onEnter,onLeave=_this$props2.onLeave,fireOnRapidScroll=_this$props2.fireOnRapidScroll;if( true&&debug){debugLog('currentPosition',currentPosition);debugLog('previousPosition',previousPosition);}// Save previous position as early as possible to prevent cycles\nthis._previousPosition=currentPosition;if(previousPosition===currentPosition){// No change since last trigger\nreturn;}var callbackArg={currentPosition:currentPosition,previousPosition:previousPosition,event:event,waypointTop:bounds.waypointTop,waypointBottom:bounds.waypointBottom,viewportTop:bounds.viewportTop,viewportBottom:bounds.viewportBottom};onPositionChange.call(this,callbackArg);if(currentPosition===INSIDE){onEnter.call(this,callbackArg);}else if(previousPosition===INSIDE){onLeave.call(this,callbackArg);}var isRapidScrollDown=previousPosition===BELOW&&currentPosition===ABOVE;var isRapidScrollUp=previousPosition===ABOVE&&currentPosition===BELOW;if(fireOnRapidScroll&&(isRapidScrollDown||isRapidScrollUp)){// If the scroll event isn't fired often enough to occur while the\n// waypoint was visible, we trigger both callbacks anyway.\nonEnter.call(this,{currentPosition:INSIDE,previousPosition:previousPosition,event:event,waypointTop:bounds.waypointTop,waypointBottom:bounds.waypointBottom,viewportTop:bounds.viewportTop,viewportBottom:bounds.viewportBottom});onLeave.call(this,{currentPosition:currentPosition,previousPosition:INSIDE,event:event,waypointTop:bounds.waypointTop,waypointBottom:bounds.waypointBottom,viewportTop:bounds.viewportTop,viewportBottom:bounds.viewportBottom});}}},{key:\"_getBounds\",value:function _getBounds(){var _this$props3=this.props,horizontal=_this$props3.horizontal,debug=_this$props3.debug;var _this$_ref$getBoundin=this._ref.getBoundingClientRect(),left=_this$_ref$getBoundin.left,top=_this$_ref$getBoundin.top,right=_this$_ref$getBoundin.right,bottom=_this$_ref$getBoundin.bottom;var waypointTop=horizontal?left:top;var waypointBottom=horizontal?right:bottom;var contextHeight;var contextScrollTop;if(this.scrollableAncestor===window){contextHeight=horizontal?window.innerWidth:window.innerHeight;contextScrollTop=0;}else{contextHeight=horizontal?this.scrollableAncestor.offsetWidth:this.scrollableAncestor.offsetHeight;contextScrollTop=horizontal?this.scrollableAncestor.getBoundingClientRect().left:this.scrollableAncestor.getBoundingClientRect().top;}if( true&&debug){debugLog('waypoint top',waypointTop);debugLog('waypoint bottom',waypointBottom);debugLog('scrollableAncestor height',contextHeight);debugLog('scrollableAncestor scrollTop',contextScrollTop);}var _this$props4=this.props,bottomOffset=_this$props4.bottomOffset,topOffset=_this$props4.topOffset;var topOffsetPx=computeOffsetPixels(topOffset,contextHeight);var bottomOffsetPx=computeOffsetPixels(bottomOffset,contextHeight);var contextBottom=contextScrollTop+contextHeight;return{waypointTop:waypointTop,waypointBottom:waypointBottom,viewportTop:contextScrollTop+topOffsetPx,viewportBottom:contextBottom-bottomOffsetPx};}/**\n     * @return {Object}\n     */},{key:\"render\",value:function render(){var _this4=this;var children=this.props.children;if(!children){// We need an element that we can locate in the DOM to determine where it is\n// rendered relative to the top of its context.\nreturn/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(\"span\",{ref:this.refElement,style:{fontSize:0}});}if(isDOMElement(children)||Object(react_is__WEBPACK_IMPORTED_MODULE_3__[\"isForwardRef\"])(children)){var ref=function ref(node){_this4.refElement(node);if(children.ref){if(typeof children.ref==='function'){children.ref(node);}else{children.ref.current=node;}}};return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.cloneElement(children,{ref:ref});}return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2___default.a.cloneElement(children,{innerRef:this.refElement});}}]);return Waypoint;}(react__WEBPACK_IMPORTED_MODULE_2___default.a.PureComponent);if(true){Waypoint.propTypes={children:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.element,debug:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,onEnter:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,onLeave:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,onPositionChange:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,fireOnRapidScroll:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,// eslint-disable-next-line react/forbid-prop-types\nscrollableAncestor:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any,horizontal:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,// `topOffset` can either be a number, in which case its a distance from the\n// top of the container in pixels, or a string value. Valid string values are\n// of the form \"20px\", which is parsed as pixels, or \"20%\", which is parsed\n// as a percentage of the height of the containing element.\n// For instance, if you pass \"-20%\", and the containing element is 100px tall,\n// then the waypoint will be triggered when it has been scrolled 20px beyond\n// the top of the containing element.\ntopOffset:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number]),// `bottomOffset` is like `topOffset`, but for the bottom of the container.\nbottomOffset:prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number])};}Waypoint.above=ABOVE;Waypoint.below=BELOW;Waypoint.inside=INSIDE;Waypoint.invisible=INVISIBLE;Waypoint.getWindow=function(){if(typeof window!=='undefined'){return window;}return undefined;};Waypoint.defaultProps=defaultProps;Waypoint.displayName='Waypoint';\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-waypoint/es/index.js\n");

/***/ }),

/***/ "./packages/kincare-theme/src/components/pages/Home.js":
/*!*************************************************************!*\
  !*** ./packages/kincare-theme/src/components/pages/Home.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_waypoint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-waypoint */ \"./node_modules/react-waypoint/es/index.js\");\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! gsap */ \"./node_modules/gsap/index.js\");\n/* harmony import */ var _parts_ContactForm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../parts/ContactForm */ \"./packages/kincare-theme/src/components/parts/ContactForm.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}const Home=({state,page})=>{const[populated,setPopulated]=Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])({what_we_offer:false,services:false,mission:false,why_us:false});const{who_we_are,what_we_offer,services,our_mission,why_us}=page.acf;let sectionPadding='48px 32px';const WhoWeAre=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg7\",label:\"WhoWeAre\"})(\"background-color:\",state.theme.colors.darkBlue,\";padding:\",sectionPadding,\";color:#ffffff;h2{font-weight:bold;}p{font-size:16px;font-weight:400;line-height:22px;letter-spacing:0em;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const WhatWeOffer=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg6\",label:\"WhatWeOffer\"})(\"padding:\",sectionPadding,\";h2{font-weight:bold;}img{border-radius:8px;}p{font-size:16px;font-weight:400;line-height:22px;letter-spacing:0em;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3NhbS9TaXRlcy9raW5jYXJlLWZyb250aXR5L3BhY2thZ2VzL2tpbmNhcmUtdGhlbWUvc3JjL2NvbXBvbmVudHMvcGFnZXMvSG9tZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQ3NDIiwiZmlsZSI6Ii9ob21lL3NhbS9TaXRlcy9raW5jYXJlLWZyb250aXR5L3BhY2thZ2VzL2tpbmNhcmUtdGhlbWUvc3JjL2NvbXBvbmVudHMvcGFnZXMvSG9tZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSAnZnJvbnRpdHknXG5pbXBvcnQgeyBXYXlwb2ludCB9IGZyb20gJ3JlYWN0LXdheXBvaW50J1xuaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCdcblxuaW1wb3J0IENvbnRhY3RGb3JtIGZyb20gJy4uL3BhcnRzL0NvbnRhY3RGb3JtJ1xuXG5jb25zdCBIb21lID0gKHsgc3RhdGUsIHBhZ2UgfSkgPT4ge1xuICAgIGNvbnN0IFtwb3B1bGF0ZWQsIHNldFBvcHVsYXRlZF0gPSB1c2VTdGF0ZSh7XG4gICAgICAgIHdoYXRfd2Vfb2ZmZXI6IGZhbHNlLFxuICAgICAgICBzZXJ2aWNlczogZmFsc2UsXG4gICAgICAgIG1pc3Npb246IGZhbHNlLFxuICAgICAgICB3aHlfdXM6IGZhbHNlXG4gICAgfSlcblxuICAgIGNvbnN0IHsgd2hvX3dlX2FyZSwgd2hhdF93ZV9vZmZlciwgc2VydmljZXMsIG91cl9taXNzaW9uLCB3aHlfdXMgfSA9IHBhZ2UuYWNmXG5cbiAgICBsZXQgc2VjdGlvblBhZGRpbmcgPSAnNDhweCAzMnB4J1xuXG4gICAgY29uc3QgV2hvV2VBcmUgPSBzdHlsZWQuc2VjdGlvbmBcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjoke3N0YXRlLnRoZW1lLmNvbG9ycy5kYXJrQmx1ZX07XG4gICAgICAgIHBhZGRpbmc6JHtzZWN0aW9uUGFkZGluZ307XG4gICAgICAgIGNvbG9yOiNmZmZmZmY7XG4gICAgICAgIGgyIHtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OmJvbGQ7XG4gICAgICAgIH1cbiAgICAgICAgcCB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMGVtO1xuICAgICAgICB9XG4gICAgYFxuXG4gICAgY29uc3QgV2hhdFdlT2ZmZXIgPSBzdHlsZWQuc2VjdGlvbmBcbiAgICAgICAgcGFkZGluZzoke3NlY3Rpb25QYWRkaW5nfTtcbiAgICAgICAgaDIge1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6Ym9sZDtcbiAgICAgICAgfVxuICAgICAgICBpbWcge1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czo4cHg7XG4gICAgICAgIH1cbiAgICAgICAgcCB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMGVtO1xuICAgICAgICB9XG4gICAgYFxuXG4gICAgY29uc3QgU2VydmljZXMgPSBzdHlsZWQuc2VjdGlvbmBcbiAgICAgICAgcGFkZGluZzoke3NlY3Rpb25QYWRkaW5nfTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjoke3N0YXRlLnRoZW1lLmNvbG9ycy5saWdodEdyYXlCbHVlfTtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6Jyc7XG4gICAgICAgICAgICB3aWR0aDowO1xuICAgICAgICAgICAgaGVpZ2h0OjA7XG4gICAgICAgICAgICBib3JkZXItc3R5bGU6c29saWQ7XG4gICAgICAgICAgICBib3JkZXItd2lkdGg6MzRweCAzN3B4IDAgMzdweDtcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjojZmZmZmZmIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgICAgICBsZWZ0OmNhbGMoNTAlIC0gMzdweCk7XG4gICAgICAgICAgICB0b3A6LTJweDtcbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IFNlcnZpY2VCb3ggPSBzdHlsZWQuYXJ0aWNsZWBcbiAgICAgICAgcGFkZGluZzoxNnB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiNmZmZmZmY7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6OHB4O1xuICAgICAgICBib3gtc2hhZG93OiAwcHggMTVweCAyNHB4IHJnYmEoMCwgMCwgMCwgMC4wNSk7XG4gICAgICAgIHRleHQtYWxpZ246Y2VudGVyO1xuICAgICAgICBtYXJnaW4tdG9wOjE2cHg7XG4gICAgICAgIGgzIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOjQwcHg7XG4gICAgICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgICAgICAgIHdpZHRoOjEwMCU7XG4gICAgICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OicnO1xuICAgICAgICAgICAgICAgIHdpZHRoOjQwcHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OjVweDtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiR7c3RhdGUudGhlbWUuY29sb3JzLmRhcmtHcmF5fTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICBsZWZ0OmNhbGMoNTAlIC0gMjBweCk7XG4gICAgICAgICAgICAgICAgYm90dG9tOi0yMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHAge1xuICAgICAgICAgICAgZm9udC1zaXplOjE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDozMDA7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDoxN3B4O1xuICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6MXB4O1xuICAgICAgICB9XG4gICAgYFxuXG4gICAgY29uc3QgTWlzc2lvbiA9IHN0eWxlZC5zZWN0aW9uYFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiR7c3RhdGUudGhlbWUuY29sb3JzLmRhcmtCbHVlfTtcbiAgICAgICAgcGFkZGluZzoke3NlY3Rpb25QYWRkaW5nfTtcbiAgICAgICAgY29sb3I6I2ZmZmZmZjtcbiAgICAgICAgaDIge1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6ODAwO1xuICAgICAgICAgICAgJjphZnRlciB7XG4gICAgICAgICAgICAgICAgd2lkdGg6ODBweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6MTBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IFdoeVVzID0gc3R5bGVkLnNlY3Rpb25gXG4gICAgICAgIHBhZGRpbmc6JHtzZWN0aW9uUGFkZGluZ307XG4gICAgICAgIGgyIHtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OjgwMDtcbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IFdoeVVzQm94ID0gc3R5bGVkLmFydGljbGVgXG4gICAgICAgIHBhZGRpbmc6NDBweCAzMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiR7c3RhdGUudGhlbWUuY29sb3JzLmxpZ2h0R3JheUJsdWV9O1xuICAgICAgICBib3JkZXItcmFkaXVzOjhweDtcbiAgICAgICAgdGV4dC1hbGlnbjpjZW50ZXI7XG4gICAgICAgIGgzIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA5MDA7XG4gICAgICAgIH1cbiAgICAgICAgcCB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogMzAwO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE3cHg7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206MTBweDtcbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IENvbnRhY3RTZWN0aW9uID0gc3R5bGVkLnNlY3Rpb25gXG4gICAgICAgIHBhZGRpbmc6JHtzZWN0aW9uUGFkZGluZ307XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6JHtzdGF0ZS50aGVtZS5jb2xvcnMubGlnaHRHcmF5Qmx1ZX07XG4gICAgYFxuICAgIFxuICAgIGNvbnN0IGFuaW1hdGVTZWN0aW9uID0gKHNlY3Rpb24pID0+IHtcbiAgICAgICAgc3dpdGNoKHNlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ3doYXQtd2Utb2ZmZXInOlxuICAgICAgICAgICAgICAgIGlmKCFwb3B1bGF0ZWQud2hhdF93ZV9vZmZlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndGVzdCcpXG4gICAgICAgICAgICAgICAgICAgIGdzYXAuZnJvbShgLndoYXQtd2Utb2ZmZXIgLmltZy1mbHVpZGAsIHsgeDogLTMwMCwgb3BhY2l0eTogMCwgZHVyYXRpb246IDAuNSB9KVxuICAgICAgICAgICAgICAgICAgICBnc2FwLmZyb20oJy53aGF0LXdlLW9mZmVyIGgyLCAud2hhdC13ZS1vZmZlciBwJywgeyB4OiAtNDAwLCBvcGFjaXR5OiAwLCBkdXJhdGlvbjogMC4zNSwgc3RhZ2dlcjogMC4xNSB9KVxuICAgICAgICAgICAgICAgICAgICBzZXRQb3B1bGF0ZWQoeyAuLi5wb3B1bGF0ZWQsIHdoYXRfd2Vfb2ZmZXI6IGZhbHNlIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPFdob1dlQXJlPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbCBjb2wtMTIgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+e3dob193ZV9hcmUudGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57d2hvX3dlX2FyZS5jb250ZW50fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvV2hvV2VBcmU+XG4gICAgICAgICAgICA8V2F5cG9pbnQgb25FbnRlcj17KCkgPT4gYW5pbWF0ZVNlY3Rpb24oJ3doYXQtd2Utb2ZmZXInKX0+XG4gICAgICAgICAgICAgICAgPFdoYXRXZU9mZmVyIGNsYXNzTmFtZT1cIndoYXQtd2Utb2ZmZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbCBjb2wtMTIgY29sLXhsLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJpbWctZmx1aWRcIiBzcmM9e3doYXRfd2Vfb2ZmZXIuaW1hZ2V9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wgY29sLTEyIGNvbC14bC00IGQtZmxleCBmbGV4LWNvbHVtbiBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj57d2hhdF93ZV9vZmZlci50aXRsZX08L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57d2hhdF93ZV9vZmZlci5jb250ZW50fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L1doYXRXZU9mZmVyPlxuICAgICAgICAgICAgPC9XYXlwb2ludD5cbiAgICAgICAgICAgIDxTZXJ2aWNlcz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtbWQtNiBjb2wteGwtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17c2VydmljZXMuc2VydmljZV8xLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57c2VydmljZXMuc2VydmljZV8xLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3NlcnZpY2VzLnNlcnZpY2VfMS5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtbWQtNiBjb2wteGwtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17c2VydmljZXMuc2VydmljZV8yLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57c2VydmljZXMuc2VydmljZV8yLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3NlcnZpY2VzLnNlcnZpY2VfMi5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtbWQtNiBjb2wteGwtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17c2VydmljZXMuc2VydmljZV8zLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57c2VydmljZXMuc2VydmljZV8zLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3NlcnZpY2VzLnNlcnZpY2VfMy5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9TZXJ2aWNlcz5cbiAgICAgICAgICAgIDxNaXNzaW9uPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sIGNvbC0xMiBjb2wteGwtOFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj57b3VyX21pc3Npb24udGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57b3VyX21pc3Npb24uY29udGVudH08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L01pc3Npb24+XG4gICAgICAgICAgICA8V2h5VXM+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wgY29sLTEyIGNvbC14bC04IHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPnt3aHlfdXMudGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57d2h5X3VzLmNvbnRlbnR9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIHB0LTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEyIGNvbC1tZC02IGNvbC14bC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFdoeVVzQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17d2h5X3VzLnJlYXNvbl8xLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57d2h5X3VzLnJlYXNvbl8xLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3doeV91cy5yZWFzb25fMS5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9XaHlVc0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgY29sLW1kLTYgY29sLXhsLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8V2h5VXNCb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt3aHlfdXMucmVhc29uXzIuaWNvbn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPnt3aHlfdXMucmVhc29uXzIubmFtZX08L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57d2h5X3VzLnJlYXNvbl8yLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1doeVVzQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtbWQtNiBjb2wteGwtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxXaHlVc0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3doeV91cy5yZWFzb25fMy5pY29ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+e3doeV91cy5yZWFzb25fMy5uYW1lfTwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt3aHlfdXMucmVhc29uXzMuZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvV2h5VXNCb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbCBwdC01IHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17d2h5X3VzLmN0YS5saW5rX3RvfT57d2h5X3VzLmN0YS5saW5rX3RleHR9PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9XaHlVcz5cbiAgICAgICAgICAgIDxDb250YWN0U2VjdGlvbj5cbiAgICAgICAgICAgICAgICA8Q29udGFjdEZvcm0gLz5cbiAgICAgICAgICAgIDwvQ29udGFjdFNlY3Rpb24+XG4gICAgICAgIDwvPlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChIb21lKSJdfQ== */\"));const Services=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg5\",label:\"Services\"})(\"padding:\",sectionPadding,\";background-color:\",state.theme.colors.lightGrayBlue,\";position:relative;&:before{content:'';width:0;height:0;border-style:solid;border-width:34px 37px 0 37px;border-color:#ffffff transparent transparent transparent;position:absolute;left:calc(50% - 37px);top:-2px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const ServiceBox=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"article\", false?undefined:{target:\"ebbr1eg4\",label:\"ServiceBox\"})(\"padding:16px;background-color:#ffffff;border-radius:8px;box-shadow:0px 15px 24px rgba(0, 0, 0, 0.05);text-align:center;margin-top:16px;h3{font-size:24px;font-weight:700;margin-bottom:40px;position:relative;width:100%;&:after{content:'';width:40px;height:5px;background-color:\",state.theme.colors.darkGray,\";position:absolute;left:calc(50% - 20px);bottom:-20px;}}p{font-size:16px;font-weight:300;line-height:17px;letter-spacing:1px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3NhbS9TaXRlcy9raW5jYXJlLWZyb250aXR5L3BhY2thZ2VzL2tpbmNhcmUtdGhlbWUvc3JjL2NvbXBvbmVudHMvcGFnZXMvSG9tZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtRXFDIiwiZmlsZSI6Ii9ob21lL3NhbS9TaXRlcy9raW5jYXJlLWZyb250aXR5L3BhY2thZ2VzL2tpbmNhcmUtdGhlbWUvc3JjL2NvbXBvbmVudHMvcGFnZXMvSG9tZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSAnZnJvbnRpdHknXG5pbXBvcnQgeyBXYXlwb2ludCB9IGZyb20gJ3JlYWN0LXdheXBvaW50J1xuaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCdcblxuaW1wb3J0IENvbnRhY3RGb3JtIGZyb20gJy4uL3BhcnRzL0NvbnRhY3RGb3JtJ1xuXG5jb25zdCBIb21lID0gKHsgc3RhdGUsIHBhZ2UgfSkgPT4ge1xuICAgIGNvbnN0IFtwb3B1bGF0ZWQsIHNldFBvcHVsYXRlZF0gPSB1c2VTdGF0ZSh7XG4gICAgICAgIHdoYXRfd2Vfb2ZmZXI6IGZhbHNlLFxuICAgICAgICBzZXJ2aWNlczogZmFsc2UsXG4gICAgICAgIG1pc3Npb246IGZhbHNlLFxuICAgICAgICB3aHlfdXM6IGZhbHNlXG4gICAgfSlcblxuICAgIGNvbnN0IHsgd2hvX3dlX2FyZSwgd2hhdF93ZV9vZmZlciwgc2VydmljZXMsIG91cl9taXNzaW9uLCB3aHlfdXMgfSA9IHBhZ2UuYWNmXG5cbiAgICBsZXQgc2VjdGlvblBhZGRpbmcgPSAnNDhweCAzMnB4J1xuXG4gICAgY29uc3QgV2hvV2VBcmUgPSBzdHlsZWQuc2VjdGlvbmBcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjoke3N0YXRlLnRoZW1lLmNvbG9ycy5kYXJrQmx1ZX07XG4gICAgICAgIHBhZGRpbmc6JHtzZWN0aW9uUGFkZGluZ307XG4gICAgICAgIGNvbG9yOiNmZmZmZmY7XG4gICAgICAgIGgyIHtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OmJvbGQ7XG4gICAgICAgIH1cbiAgICAgICAgcCB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMGVtO1xuICAgICAgICB9XG4gICAgYFxuXG4gICAgY29uc3QgV2hhdFdlT2ZmZXIgPSBzdHlsZWQuc2VjdGlvbmBcbiAgICAgICAgcGFkZGluZzoke3NlY3Rpb25QYWRkaW5nfTtcbiAgICAgICAgaDIge1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6Ym9sZDtcbiAgICAgICAgfVxuICAgICAgICBpbWcge1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czo4cHg7XG4gICAgICAgIH1cbiAgICAgICAgcCB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMGVtO1xuICAgICAgICB9XG4gICAgYFxuXG4gICAgY29uc3QgU2VydmljZXMgPSBzdHlsZWQuc2VjdGlvbmBcbiAgICAgICAgcGFkZGluZzoke3NlY3Rpb25QYWRkaW5nfTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjoke3N0YXRlLnRoZW1lLmNvbG9ycy5saWdodEdyYXlCbHVlfTtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6Jyc7XG4gICAgICAgICAgICB3aWR0aDowO1xuICAgICAgICAgICAgaGVpZ2h0OjA7XG4gICAgICAgICAgICBib3JkZXItc3R5bGU6c29saWQ7XG4gICAgICAgICAgICBib3JkZXItd2lkdGg6MzRweCAzN3B4IDAgMzdweDtcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjojZmZmZmZmIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgICAgICBsZWZ0OmNhbGMoNTAlIC0gMzdweCk7XG4gICAgICAgICAgICB0b3A6LTJweDtcbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IFNlcnZpY2VCb3ggPSBzdHlsZWQuYXJ0aWNsZWBcbiAgICAgICAgcGFkZGluZzoxNnB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiNmZmZmZmY7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6OHB4O1xuICAgICAgICBib3gtc2hhZG93OiAwcHggMTVweCAyNHB4IHJnYmEoMCwgMCwgMCwgMC4wNSk7XG4gICAgICAgIHRleHQtYWxpZ246Y2VudGVyO1xuICAgICAgICBtYXJnaW4tdG9wOjE2cHg7XG4gICAgICAgIGgzIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOjQwcHg7XG4gICAgICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgICAgICAgIHdpZHRoOjEwMCU7XG4gICAgICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OicnO1xuICAgICAgICAgICAgICAgIHdpZHRoOjQwcHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OjVweDtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiR7c3RhdGUudGhlbWUuY29sb3JzLmRhcmtHcmF5fTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICBsZWZ0OmNhbGMoNTAlIC0gMjBweCk7XG4gICAgICAgICAgICAgICAgYm90dG9tOi0yMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHAge1xuICAgICAgICAgICAgZm9udC1zaXplOjE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDozMDA7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDoxN3B4O1xuICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6MXB4O1xuICAgICAgICB9XG4gICAgYFxuXG4gICAgY29uc3QgTWlzc2lvbiA9IHN0eWxlZC5zZWN0aW9uYFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiR7c3RhdGUudGhlbWUuY29sb3JzLmRhcmtCbHVlfTtcbiAgICAgICAgcGFkZGluZzoke3NlY3Rpb25QYWRkaW5nfTtcbiAgICAgICAgY29sb3I6I2ZmZmZmZjtcbiAgICAgICAgaDIge1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6ODAwO1xuICAgICAgICAgICAgJjphZnRlciB7XG4gICAgICAgICAgICAgICAgd2lkdGg6ODBweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6MTBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IFdoeVVzID0gc3R5bGVkLnNlY3Rpb25gXG4gICAgICAgIHBhZGRpbmc6JHtzZWN0aW9uUGFkZGluZ307XG4gICAgICAgIGgyIHtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OjgwMDtcbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IFdoeVVzQm94ID0gc3R5bGVkLmFydGljbGVgXG4gICAgICAgIHBhZGRpbmc6NDBweCAzMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiR7c3RhdGUudGhlbWUuY29sb3JzLmxpZ2h0R3JheUJsdWV9O1xuICAgICAgICBib3JkZXItcmFkaXVzOjhweDtcbiAgICAgICAgdGV4dC1hbGlnbjpjZW50ZXI7XG4gICAgICAgIGgzIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA5MDA7XG4gICAgICAgIH1cbiAgICAgICAgcCB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogMzAwO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE3cHg7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206MTBweDtcbiAgICAgICAgfVxuICAgIGBcblxuICAgIGNvbnN0IENvbnRhY3RTZWN0aW9uID0gc3R5bGVkLnNlY3Rpb25gXG4gICAgICAgIHBhZGRpbmc6JHtzZWN0aW9uUGFkZGluZ307XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6JHtzdGF0ZS50aGVtZS5jb2xvcnMubGlnaHRHcmF5Qmx1ZX07XG4gICAgYFxuICAgIFxuICAgIGNvbnN0IGFuaW1hdGVTZWN0aW9uID0gKHNlY3Rpb24pID0+IHtcbiAgICAgICAgc3dpdGNoKHNlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ3doYXQtd2Utb2ZmZXInOlxuICAgICAgICAgICAgICAgIGlmKCFwb3B1bGF0ZWQud2hhdF93ZV9vZmZlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndGVzdCcpXG4gICAgICAgICAgICAgICAgICAgIGdzYXAuZnJvbShgLndoYXQtd2Utb2ZmZXIgLmltZy1mbHVpZGAsIHsgeDogLTMwMCwgb3BhY2l0eTogMCwgZHVyYXRpb246IDAuNSB9KVxuICAgICAgICAgICAgICAgICAgICBnc2FwLmZyb20oJy53aGF0LXdlLW9mZmVyIGgyLCAud2hhdC13ZS1vZmZlciBwJywgeyB4OiAtNDAwLCBvcGFjaXR5OiAwLCBkdXJhdGlvbjogMC4zNSwgc3RhZ2dlcjogMC4xNSB9KVxuICAgICAgICAgICAgICAgICAgICBzZXRQb3B1bGF0ZWQoeyAuLi5wb3B1bGF0ZWQsIHdoYXRfd2Vfb2ZmZXI6IGZhbHNlIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPFdob1dlQXJlPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbCBjb2wtMTIgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+e3dob193ZV9hcmUudGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57d2hvX3dlX2FyZS5jb250ZW50fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvV2hvV2VBcmU+XG4gICAgICAgICAgICA8V2F5cG9pbnQgb25FbnRlcj17KCkgPT4gYW5pbWF0ZVNlY3Rpb24oJ3doYXQtd2Utb2ZmZXInKX0+XG4gICAgICAgICAgICAgICAgPFdoYXRXZU9mZmVyIGNsYXNzTmFtZT1cIndoYXQtd2Utb2ZmZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbCBjb2wtMTIgY29sLXhsLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJpbWctZmx1aWRcIiBzcmM9e3doYXRfd2Vfb2ZmZXIuaW1hZ2V9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wgY29sLTEyIGNvbC14bC00IGQtZmxleCBmbGV4LWNvbHVtbiBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj57d2hhdF93ZV9vZmZlci50aXRsZX08L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57d2hhdF93ZV9vZmZlci5jb250ZW50fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L1doYXRXZU9mZmVyPlxuICAgICAgICAgICAgPC9XYXlwb2ludD5cbiAgICAgICAgICAgIDxTZXJ2aWNlcz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtbWQtNiBjb2wteGwtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17c2VydmljZXMuc2VydmljZV8xLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57c2VydmljZXMuc2VydmljZV8xLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3NlcnZpY2VzLnNlcnZpY2VfMS5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtbWQtNiBjb2wteGwtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17c2VydmljZXMuc2VydmljZV8yLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57c2VydmljZXMuc2VydmljZV8yLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3NlcnZpY2VzLnNlcnZpY2VfMi5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtbWQtNiBjb2wteGwtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17c2VydmljZXMuc2VydmljZV8zLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57c2VydmljZXMuc2VydmljZV8zLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3NlcnZpY2VzLnNlcnZpY2VfMy5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZXJ2aWNlQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9TZXJ2aWNlcz5cbiAgICAgICAgICAgIDxNaXNzaW9uPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGp1c3RpZnktY29udGVudC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sIGNvbC0xMiBjb2wteGwtOFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj57b3VyX21pc3Npb24udGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57b3VyX21pc3Npb24uY29udGVudH08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L01pc3Npb24+XG4gICAgICAgICAgICA8V2h5VXM+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wgY29sLTEyIGNvbC14bC04IHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPnt3aHlfdXMudGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57d2h5X3VzLmNvbnRlbnR9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIHB0LTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEyIGNvbC1tZC02IGNvbC14bC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFdoeVVzQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17d2h5X3VzLnJlYXNvbl8xLmljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57d2h5X3VzLnJlYXNvbl8xLm5hbWV9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3doeV91cy5yZWFzb25fMS5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9XaHlVc0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgY29sLW1kLTYgY29sLXhsLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8V2h5VXNCb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt3aHlfdXMucmVhc29uXzIuaWNvbn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPnt3aHlfdXMucmVhc29uXzIubmFtZX08L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57d2h5X3VzLnJlYXNvbl8yLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1doeVVzQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtbWQtNiBjb2wteGwtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxXaHlVc0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3doeV91cy5yZWFzb25fMy5pY29ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+e3doeV91cy5yZWFzb25fMy5uYW1lfTwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt3aHlfdXMucmVhc29uXzMuZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvV2h5VXNCb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbCBwdC01IHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17d2h5X3VzLmN0YS5saW5rX3RvfT57d2h5X3VzLmN0YS5saW5rX3RleHR9PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9XaHlVcz5cbiAgICAgICAgICAgIDxDb250YWN0U2VjdGlvbj5cbiAgICAgICAgICAgICAgICA8Q29udGFjdEZvcm0gLz5cbiAgICAgICAgICAgIDwvQ29udGFjdFNlY3Rpb24+XG4gICAgICAgIDwvPlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChIb21lKSJdfQ== */\"));const Mission=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg3\",label:\"Mission\"})(\"background-color:\",state.theme.colors.darkBlue,\";padding:\",sectionPadding,\";color:#ffffff;h2{font-weight:800;&:after{width:80px;height:10px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const WhyUs=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg2\",label:\"WhyUs\"})(\"padding:\",sectionPadding,\";h2{font-weight:800;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const WhyUsBox=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"article\", false?undefined:{target:\"ebbr1eg1\",label:\"WhyUsBox\"})(\"padding:40px 30px;background-color:\",state.theme.colors.lightGrayBlue,\";border-radius:8px;text-align:center;h3{font-size:28px;font-weight:900;}p{font-size:16px;font-weight:300;line-height:17px;margin:0;}img{margin-bottom:10px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const ContactSection=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"section\", false?undefined:{target:\"ebbr1eg0\",label:\"ContactSection\"})(\"padding:\",sectionPadding,\";background-color:\",state.theme.colors.lightGrayBlue,\";\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const animateSection=section=>{switch(section){case'what-we-offer':if(!populated.what_we_offer){console.log('test');gsap__WEBPACK_IMPORTED_MODULE_6__[\"default\"].from(`.what-we-offer .img-fluid`,{x:-300,opacity:0,duration:0.5});gsap__WEBPACK_IMPORTED_MODULE_6__[\"default\"].from('.what-we-offer h2, .what-we-offer p',{x:-400,opacity:0,duration:0.35,stagger:0.15});setPopulated(_objectSpread(_objectSpread({},populated),{},{what_we_offer:false}));}break;}};return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(WhoWeAre,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"row\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"col col-12 text-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h2\",{children:who_we_are.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:who_we_are.content})]})})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_waypoint__WEBPACK_IMPORTED_MODULE_5__[\"Waypoint\"],{onEnter:()=>animateSection('what-we-offer'),children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(WhatWeOffer,{className:\"what-we-offer\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"row justify-content-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col col-12 col-xl-4\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{className:\"img-fluid\",src:what_we_offer.image})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"col col-12 col-xl-4 d-flex flex-column justify-content-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h2\",{children:what_we_offer.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:what_we_offer.content})]})]})})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Services,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"row justify-content-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col-12 col-md-6 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(ServiceBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:services.service_1.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",{children:services.service_1.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:services.service_1.description})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col-12 col-md-6 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(ServiceBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:services.service_2.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",{children:services.service_2.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:services.service_2.description})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col-12 col-md-6 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(ServiceBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:services.service_3.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",{children:services.service_3.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:services.service_3.description})]})})]})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Mission,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"row justify-content-center\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"col col-12 col-xl-8\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h2\",{children:our_mission.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:our_mission.content})]})})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(WhyUs,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"container\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"row justify-content-center\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"col col-12 col-xl-8 text-center\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h2\",{children:why_us.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:why_us.content})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{className:\"row justify-content-center pt-4\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col-12 col-md-6 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(WhyUsBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:why_us.reason_1.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",{children:why_us.reason_1.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:why_us.reason_1.description})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col-12 col-md-6 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(WhyUsBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:why_us.reason_2.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",{children:why_us.reason_2.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:why_us.reason_2.description})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col-12 col-md-6 col-xl-3\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(WhyUsBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"img\",{src:why_us.reason_3.icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",{children:why_us.reason_3.name}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{children:why_us.reason_3.description})]})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"row\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{className:\"col pt-5 text-center\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"a\",{href:why_us.cta.link_to,children:why_us.cta.link_text})})})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(ContactSection,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_parts_ContactForm__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{})})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"connect\"])(Home));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/kincare-theme/src/components/pages/Home.js\n");

/***/ }),

/***/ "./packages/kincare-theme/src/components/parts/ContactForm.js":
/*!********************************************************************!*\
  !*** ./packages/kincare-theme/src/components/parts/ContactForm.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nconst ContactForm=()=>{return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(\"div\",{children:\"Contact Form\"});};/* harmony default export */ __webpack_exports__[\"default\"] = (ContactForm);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9raW5jYXJlLXRoZW1lL3NyYy9jb21wb25lbnRzL3BhcnRzL0NvbnRhY3RGb3JtLmpzPzFkOWEiXSwibmFtZXMiOlsiQ29udGFjdEZvcm0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUEsS0FBTUEsWUFBVyxDQUFHLElBQU0sQ0FDdEIsTUFDSSx3R0FESixDQUtILENBTkQsQ0FRZUEsMEVBQWYiLCJmaWxlIjoiLi9wYWNrYWdlcy9raW5jYXJlLXRoZW1lL3NyYy9jb21wb25lbnRzL3BhcnRzL0NvbnRhY3RGb3JtLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5jb25zdCBDb250YWN0Rm9ybSA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgQ29udGFjdCBGb3JtXG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGFjdEZvcm0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./packages/kincare-theme/src/components/parts/ContactForm.js\n");

/***/ })

})